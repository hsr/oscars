
/*
 * 
 */

package net.es.oscars.nsibridge.soap.gen.nsi_2_0.discovery.provider;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.7
 * Wed Nov 07 14:42:38 PST 2012
 * Generated source version: 2.2.7
 * 
 */


@WebServiceClient(name = "DiscoveryServiceProvider", 
                  wsdlLocation = "file:/Users/haniotak/ij/0_6_trunk/nsibridge/schema/nsi-2_0/ogf_nsi_discovery_provider_v2_0.wsdl",
                  targetNamespace = "http://schemas.ogf.org/nsi/2012/03/discovery/provider") 
public class DiscoveryServiceProvider extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://schemas.ogf.org/nsi/2012/03/discovery/provider", "DiscoveryServiceProvider");
    public final static QName DiscoveryProviderPort = new QName("http://schemas.ogf.org/nsi/2012/03/discovery/provider", "DiscoveryProviderPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/haniotak/ij/0_6_trunk/nsibridge/schema/nsi-2_0/ogf_nsi_discovery_provider_v2_0.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/Users/haniotak/ij/0_6_trunk/nsibridge/schema/nsi-2_0/ogf_nsi_discovery_provider_v2_0.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public DiscoveryServiceProvider(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DiscoveryServiceProvider(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DiscoveryServiceProvider() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns DiscoveryProviderPort
     */
    @WebEndpoint(name = "DiscoveryProviderPort")
    public DiscoveryProviderPort getDiscoveryProviderPort() {
        return super.getPort(DiscoveryProviderPort, DiscoveryProviderPort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DiscoveryProviderPort
     */
    @WebEndpoint(name = "DiscoveryProviderPort")
    public DiscoveryProviderPort getDiscoveryProviderPort(WebServiceFeature... features) {
        return super.getPort(DiscoveryProviderPort, DiscoveryProviderPort.class, features);
    }

}
